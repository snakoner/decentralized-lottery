/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDecentralizerLotteryInterface extends Interface {
  getFunction(
    nameOrSignature: "bid" | "restartEmpty" | "start" | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Bid" | "WinnerSelected" | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "restartEmpty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "restartEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BidEvent {
  export type InputTuple = [
    account: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish,
    round: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    amount: bigint,
    timestamp: bigint,
    round: bigint
  ];
  export interface OutputObject {
    account: string;
    amount: bigint;
    timestamp: bigint;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerSelectedEvent {
  export type InputTuple = [
    account: AddressLike,
    amount: BigNumberish,
    round: BigNumberish
  ];
  export type OutputTuple = [account: string, amount: bigint, round: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    account: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, to: string, amount: bigint];
  export interface OutputObject {
    account: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDecentralizerLottery extends BaseContract {
  connect(runner?: ContractRunner | null): IDecentralizerLottery;
  waitForDeployment(): Promise<this>;

  interface: IDecentralizerLotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bid: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  restartEmpty: TypedContractMethod<
    [newDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  start: TypedContractMethod<[], [void], "nonpayable">;

  withdraw: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "restartEmpty"
  ): TypedContractMethod<[newDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Bid"
  ): TypedContractEvent<
    BidEvent.InputTuple,
    BidEvent.OutputTuple,
    BidEvent.OutputObject
  >;
  getEvent(
    key: "WinnerSelected"
  ): TypedContractEvent<
    WinnerSelectedEvent.InputTuple,
    WinnerSelectedEvent.OutputTuple,
    WinnerSelectedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Bid(address,uint256,uint256,uint256)": TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;
    Bid: TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;

    "WinnerSelected(address,uint256,uint256)": TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
    WinnerSelected: TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
